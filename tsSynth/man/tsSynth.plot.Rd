% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tsSynth.plot.R
\name{tsSynth.plot}
\alias{tsSynth.plot}
\title{Plot graphs relevant to the outcome trajectories for treatment and constructed control.}
\usage{
tsSynth.plot(
  tsSynth.meth.obj = NULL,
  type = "path",
  tr.intake = NULL,
  Ylab = "Outcome",
  Xlab = "Time",
  Legend = c("Treatment", "Control"),
  Main = "Trajectories for Treatment and Constructed Control"
)
}
\arguments{
\item{tsSynth.meth.obj}{Output list created by \code{tsSynth.meth}.}

\item{type}{A character string indicating the type of plot. Possible values are "path" (the default, outcome trajectories) and "gaps" (gaps in outcome trajectories).}

\item{tr.intake}{Optional scalar to indicate the time period when the intervention occurs.}

\item{Ylab}{Optional label for Y axis.}

\item{Xlab}{Optional label for X axis.}

\item{Legend}{Optional legend text. Only applicable when plotting outcome trajectories.}

\item{Main}{Optional main title.}
}
\value{
The plot of two groups' trajectories or their gaps.
}
\description{
This function allows users to plot the outcome trajectories between the treated units and the synthetic control unit, and gaps in outcome between these two groups. The users can specify some attributes of the plots, like labels for axis, main title and legend text.
}
\details{
User should import a dataframe ("data") with required wide format, identify the columns associated with treatment and control units respectively, time variable and the pre-treatment time periods.
}
\examples{
  ##In order to run tsSynth.plot() properly, we recommend users to run
  ##tsSynth.prep for components extraction first.

  #load data from the package.
  data(synth.data)

  #extract relevant components necessary for running tsSynth.meth()
  #from wide-format panel data.
  tsSynth.prep.out =
    tsSynth.prep(
     synth.data,
     treatment.identifier = 9,
     controls.identifier = c(2:8),
     time.variable = 1,
     time.prior = c(1984:1989),
     time.post = c(1990:1998)
     )

  #then run the tsSynth.meth command to identify the optimized weights
  tsSynth.meth.out =
    tsSynth.meth(
     tsSynth.prep.out,
     meth = "SC"
     )

  #now plot the outcome trajectories for treatment and constructed control.
  tsSynth.path.plot =
    tsSynth.plot(
     tsSynth.meth.out,
     type = "path",
     tr.intake = 1990,
     Ylab = "Production",
     Xlab = "Year",
     Legend = c("Treatment","Control")
     )

   #or plot the gaps in outcome trajectories for two groups.
   tsSynth.gaps.plot =
    tsSynth.plot(
     tsSynth.meth.out,
     type = "gaps",
     tr.intake = 1990,
     Ylab = "Production Gaps",
     Xlab = "Year",
     Main = "Gaps in Outcome between Treatment and Constructed Control"
     )

}
\references{
Li K, Shankar V (2020) Estimating the causal effect of a digitally native retailer opening a new store: a new two-step synthetic control method. Working Paper, University of Texas at Austin, Austin, TX.

  Li K (2019) Statistical inference for average treatment effects estimated by synthetic control methods. \emph{Journal of American Statistical Association}.
}
